AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Parameters:
  HostBucketName:
    Type: String
    Default: "mariiakulyk-image-scale"

Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 180
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"


Resources:
  DynamoCustomersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: images
      PrimaryKey:
        Name: Email
        Type: String


  GetImgFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetImgFunction
      CodeUri: .
      Handler:  index.getImg
      Policies: AmazonDynamoDBFullAccess
      Events:
        Api:
          Type: Api
          Properties:
            Path: /getImg
            Method: get
            RestApiId: !Ref ApiGateway

  PostImgFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: PostImgFunction
      CodeUri: .
      Handler: index.postImg
      Policies: AmazonDynamoDBFullAccess
      Events:
        MyApi:
          Type: Api
          Properties:
            Path: /postImg
            Method: post
            RestApiId: !Ref ApiGateway

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      Name: UsersApi


  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Serverless website OA'

  CloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Comment: "Cloudfront distribution for serverless website"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        Origins:
          - Id: s3-website
            DomainName: !GetAtt S3Bucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'

        DefaultCacheBehavior:
          Compress: 'true'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy: redirect-to-https

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref HostBucketName

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"

Outputs:
  GetApiUrl:
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/v1
  Domain:
    Description: 'Cloudfront Domain'
    Value: !GetAtt CloudfrontDistribution.DomainName